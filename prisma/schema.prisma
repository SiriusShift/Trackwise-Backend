generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  firstName          String?              @map("first_name")
  lastName           String?              @map("last_name")
  email              String               @unique
  username           String?              @unique
  password           String?              @map("password")
  role               String               @default("user")
  phoneNumber        String?              @map("phone_number")
  profileImageUrl    String?              @map("profile_image_url")
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @updatedAt
  google_id          String?              @unique
  assets             Asset[]
  expenses           Expense[]
  incomes            Income[]
  resetTokens        ResetToken[]
  transactionHistory TransactionHistory[]
  categoriesTracker  CategoryTracker[]
  transfer           Transfer[]
  Categories         Categories[]
  RecurringExpense   RecurringExpense[]
  InstallmentPlan    InstallmentPlan[]
}

model Transfer {
  id          Int     @id @default(autoincrement())
  userId      Int
  fromAssetId Int
  toAssetId   Int
  amount      Float
  description String?
  image       String?

  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User  @relation(fields: [userId], references: [id])
  fromAsset Asset @relation("FromAsset", fields: [fromAssetId], references: [id])
  toAsset   Asset @relation("ToAsset", fields: [toAssetId], references: [id])

  @@index([userId])
}

model Asset {
  id        Int      @id @default(autoincrement())
  name      String
  balance   Float
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  expenses Expense[]
  incomes  Income[]

  sentTransfers              Transfer[]           @relation("FromAsset") // Matches fromAsset in Transfer
  receivedTransfers          Transfer[]           @relation("ToAsset") // Matches toAsset in Transfer
  sentTransactionHistory     TransactionHistory[] @relation("TH_FromAsset")
  receivedTransactionHistory TransactionHistory[] @relation("TH_ToAsset")
  RecurringExpense           RecurringExpense[]
  InstallmentPlan            InstallmentPlan[]

  @@index([userId])
}

model Expense {
  id          Int      @id @default(autoincrement())
  date        DateTime
  categoryId  Int
  description String
  amount      Float
  assetId     Int?
  image       String?
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  status      String?

  // Foreign Keys for Recurring and Installment
  recurringExpenseId Int?
  installmentId      Int?

  category Categories @relation(fields: [categoryId], references: [id])
  asset    Asset?     @relation(fields: [assetId], references: [id])
  user     User       @relation(fields: [userId], references: [id])

  // Relations
  recurringTemplate  RecurringExpense?    @relation("RecurringGenerated", fields: [recurringExpenseId], references: [id])
  installment        Installment?         @relation(fields: [installmentId], references: [id])
  transactionHistory TransactionHistory[]

  @@index([userId])
}

model RecurringExpense {
  id          Int       @id @default(autoincrement())
  userId      Int
  description String
  amount      Float
  categoryId  Int
  assetId     Int?
  startDate   DateTime
  nextDueDate DateTime
  interval    Int
  unit        String // "day", "week", "month", "year"
  isActive    Boolean   @default(true)
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User       @relation(fields: [userId], references: [id])
  category Categories @relation(fields: [categoryId], references: [id])
  asset    Asset?     @relation(fields: [assetId], references: [id])

  generatedExpenses Expense[] @relation("RecurringGenerated")

  @@index([userId])
}

model InstallmentPlan {
  id          Int      @id @default(autoincrement())
  userId      Int
  description String
  totalAmount Float
  months      Int
  startDate   DateTime
  categoryId  Int
  assetId     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user         User          @relation(fields: [userId], references: [id])
  category     Categories    @relation(fields: [categoryId], references: [id])
  asset        Asset?        @relation(fields: [assetId], references: [id])
  installments Installment[]
}

model Installment {
  id        Int      @id @default(autoincrement())
  planId    Int
  dueDate   DateTime
  amount    Float
  status    String // "pending", "paid", etc.
  expenseId Int? // FK to Expense once paid

  plan    InstallmentPlan @relation(fields: [planId], references: [id])
  expense Expense[]
}

model Categories {
  id                Int               @id @default(autoincrement())
  name              String
  type              String
  icon              String            @default("default_icon") // Default value added
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            Int?
  expenses          Expense[]
  incomes           Income[]
  categoriesTracker CategoryTracker[]

  user             User?              @relation(fields: [userId], references: [id])
  RecurringExpense RecurringExpense[]
  InstallmentPlan  InstallmentPlan[]

  @@index([userId])
}

model Income {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  categoryId  Int
  description String?
  amount      Float
  assetId     Int?
  image       String?

  userId    Int
  status    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  category  Categories @relation(fields: [categoryId], references: [id])
  asset     Asset?     @relation(fields: [assetId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  transactionHistory TransactionHistory[]

  @@index([userId])
}

model TransactionHistory {
  id              Int      @id @default(autoincrement())
  userId          Int
  transactionType String
  amount          Float
  description     String?
  date            DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  fromAssetId     Int?
  toAssetId       Int?
  expenseId       Int?
  incomeId        Int?
  isDeleted       Boolean  @default(false)
  fromAsset       Asset?   @relation("TH_FromAsset", fields: [fromAssetId], references: [id])
  toAsset         Asset?   @relation("TH_ToAsset", fields: [toAssetId], references: [id])
  expense         Expense? @relation(fields: [expenseId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  income          Income?  @relation(fields: [incomeId], references: [id])

  @@index([userId])
}

model EmailVerification {
  id               Int      @id @default(autoincrement())
  email            String
  verificationCode String
  expirationTime   DateTime
  isVerified       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  @@map("email_verifications")
}

model CategoryTracker {
  id         Int     @id @default(autoincrement())
  limit      Float?
  userId     Int
  categoryId Int
  isActive   Boolean @default(true)

  category Categories @relation(fields: [categoryId], references: [id])
  user     User       @relation(fields: [userId], references: [id])

  @@index([userId])
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}
