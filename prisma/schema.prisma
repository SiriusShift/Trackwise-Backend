generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  firstName          String?              @map("first_name")
  lastName           String?              @map("last_name")
  email              String               @unique
  username           String?              @unique
  password           String?              @map("password")
  role               String               @default("user")
  phoneNumber        String?              @map("phone_number")
  profileImageUrl    String?              @map("profile_image_url")
  isActive           Boolean              @default(true)
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @default(now()) @updatedAt
  google_id          String?              @unique
  assets             Asset[]
  expenses           Expense[]
  incomes            Income[]
  resetTokens        ResetToken[]
  transactionHistory TransactionHistory[]
  categoriesTracker  CategoryTracker[]

  @@map("users")
}

model Asset {
  id                 Int                  @id @default(autoincrement())
  name               String
  balance            Float
  userId             Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user               User                 @relation(fields: [userId], references: [id])
  expenses           Expense[]
  incomes            Income[]
  TransactionHistory TransactionHistory[]
}

model Expense {
  id                 Int                  @id @default(autoincrement())
  date               DateTime
  categoryId         Int
  description        String
  amount             Float
  sourceId           Int?
  userId             Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  recurringExpenseId Int?
  recipient          String
  isRecurring        Boolean              @default(false)
  status             String?
  month              Int                  @default(0) @map("MONTH(date)")
  year               Int                  @default(0) @map("YEAR(date)")
  isDeleted          Boolean              @default(false)
  frequencyId        Int?
  category           Category             @relation(fields: [categoryId], references: [id])
  frequency          Frequency?           @relation(fields: [frequencyId], references: [id])
  source             Asset?               @relation(fields: [sourceId], references: [id])
  user               User                 @relation(fields: [userId], references: [id])
  transactionHistory TransactionHistory[]
}

model Frequency {
  id        Int       @id @default(autoincrement())
  name      String
  interval  Int?
  unit      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Expense   Expense[]
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String
  type            String
  icon            String            @default("default_icon") // Default value added
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  expenses        Expense[]
  incomes         Income[]
  categoriesTracker CategoryTracker[]
}

model Income {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  categoryId  Int
  description String?
  amount      Float
  sourceId    Int?
  userId      Int
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id])
  source      Asset?   @relation(fields: [sourceId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model TransactionHistory {
  id              Int      @id @default(autoincrement())
  userId          Int
  transactionType String
  amount          Float
  description     String?
  date            DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  assetId         Int
  expenseId       Int?
  isDeleted       Boolean  @default(false)
  asset           Asset    @relation(fields: [assetId], references: [id])
  expense         Expense? @relation(fields: [expenseId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model EmailVerification {
  id               Int      @id @default(autoincrement())
  email            String
  verificationCode String
  expirationTime   DateTime
  isVerified       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  @@map("email_verifications")
}

model CategoryTracker {
  id         Int    @id @default(autoincrement())
  limit      Float?
  userId     Int
  categoryId Int
  isActive   Boolean @default(true)

  category Category @relation(fields: [categoryId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}
