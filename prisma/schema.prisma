// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  firstName       String   @map("first_name") // VARCHAR(100)
  lastName        String   @map("last_name") // VARCHAR(100)
  email           String   @unique // VARCHAR(150) UNIQUE
  username        String   @unique
  password        String   @map("password") // VARCHAR(255)
  role            String   @default("user") // VARCHAR(50) DEFAULT 'user'
  phoneNumber     String?  @map("phone_number") // VARCHAR(15) (optional)
  profileImageUrl String?  @map("profile_image_url") // TEXT (optional)
  isActive        Boolean  @default(false) // BOOLEAN DEFAULT TRUE
  createdAt       DateTime @default(now()) @map("created_at") // TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") // TIMESTAMP DEFAULT CURRENT_TIMESTAMP  
  resetTokens ResetToken[] // Relation to ResetToken model
  
  // emailVerifications EmailVerification[]  @relation("UserEmailVerifications")
  @@map("users") // This maps the Prisma model to the SQL 'users' table
}

model EmailVerification {
  id              Int      @id @default(autoincrement())
  // userId            String
  email            String   
  verificationCode String
  expirationTime   DateTime
  isVerified       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  // user              User        @relation(name: "UserEmailVerifications", fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model ResetToken {
  id          Int      @id @default(autoincrement()) // Primary key
  token       String   @unique                       // Unique token string
  userId      Int                                     
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime // Expiration time for the token
  createdAt   DateTime @default(now()) // Timestamp when the token is created

  @@index([token]) // Optional index for token lookups
}
