// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//npx prisma migrate dev --name <migration-name>

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  firstName       String?  @map("first_name")
  lastName        String?  @map("last_name")
  email           String   @unique
  google_id       String?  @unique
  username        String?  @unique
  password        String?  @map("password")
  role            String   @default("user")
  phoneNumber     String?  @map("phone_number")
  profileImageUrl String?  @map("profile_image_url")
  isActive        Boolean  @default(false)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt

  assets             Asset[]
  expenses           Expense[]
  incomes            Income[]
  resetTokens        ResetToken[]
  TransactionHistory TransactionHistory[]

  @@map("users")
}

model Asset {
  id                 Int                  @id @default(autoincrement())
  name               String // Name of the asset (e.g., "Cash", "Bonds")
  balance            Float // Current balance of the asset
  userId             Int // Foreign key to User
  user               User                 @relation(fields: [userId], references: [id])
  expenses           Expense[] // One-to-many relationship with Expense
  incomes            Income[] // One-to-many relationship with Income
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  TransactionHistory TransactionHistory[]
}

model Expense {
  id                 Int       @id @default(autoincrement())
  date               DateTime  @default(now()) // Date of the expense
  categoryId         Int // Foreign key to Category
  category           Category  @relation(fields: [categoryId], references: [id])
  description        String // Description of the expense
  amount             Float // Expense amount
  sourceId           Int? // Foreign key to Asset
  source             Asset?    @relation(fields: [sourceId], references: [id])
  userId             Int // Foreign key to User
  user               User      @relation(fields: [userId], references: [id])
  recipient          String // Recipient of the expense
  limit              Float? // Expense limit
  status             String? // Status: "Paid", "Pending", etc.
  isRecurring        Boolean   @default(false) // Indicates if the expense is recurring
  frequency          String? // E.g., "Monthly", "Weekly" (only for recurring expenses)
  recurringExpenseId Int? // Links to the parent recurring expense (if applicable)
  recurringExpense   Expense?  @relation("RecurringExpense", fields: [recurringExpenseId], references: [id])
  recurringInstances Expense[] @relation("RecurringExpense") // Links to child recurring instances

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String // Name of the category (e.g., "Food & Dining", "Salary")
  type      String // "Expense" or "Income"
  expenses  Expense[] // One-to-many relationship with Expense
  incomes   Income[] // One-to-many relationship with Income
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Income {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  categoryId  Int // Foreign key to Category
  category    Category @relation(fields: [categoryId], references: [id])
  description String? // Optional description
  amount      Float // Income amount
  sourceId    Int? // Foreign key to Asset
  source      Asset?   @relation(fields: [sourceId], references: [id])
  userId      Int // Foreign key to User
  user        User     @relation(fields: [userId], references: [id])
  status      String // "Received", "Pending", etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TransactionHistory {
  id              Int      @id @default(autoincrement()) // Primary key
  userId          Int // Foreign key to User
  user            User     @relation(fields: [userId], references: [id]) // Relation to User table
  assetId       Int // Foreign key to Asset (account)
  asset         Asset    @relation(fields: [assetId], references: [id]) // Relation to Asset table
  transactionType String // "Deposit", "Withdrawal", "Transfer", "Expense", "Income"
  amount          Float // Transaction amount
  description     String? // Optional description of the transaction
  date            DateTime @default(now()) // Date and time of the transaction
  balanceAfter    Float // Account balance after the transaction
  createdAt       DateTime @default(now()) // Record creation timestamp
  updatedAt       DateTime @default(now()) @updatedAt // Record update timestamp
}

model EmailVerification {
  id               Int      @id @default(autoincrement())
  // userId            String
  email            String
  verificationCode String
  expirationTime   DateTime
  isVerified       Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  // user              User        @relation(name: "UserEmailVerifications", fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model ResetToken {
  id        Int      @id @default(autoincrement()) // Primary key
  token     String   @unique // Unique token string
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime // Expiration time for the token
  createdAt DateTime @default(now()) // Timestamp when the token is created

  @@index([token]) // Optional index for token lookups
}
